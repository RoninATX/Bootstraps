#!/usr/bin/env bash
# -----------------------------------------------------------------------------
# bootstrap-ddns-sync.sh — Installer for the Cloudflare dynamic DNS sync helper
# -----------------------------------------------------------------------------
# 1. Download the ddns-sync.sh worker script from this repository.
# 2. Optionally guide the user through creating / updating the configuration.
# 3. Print scheduling guidance so the sync can be run by cron.
# -----------------------------------------------------------------------------

set -euo pipefail

if [[ $EUID -ne 0 ]]; then
  echo "Please run as root (sudo)." >&2
  exit 1
fi

if ! command -v curl >/dev/null 2>&1; then
  echo "curl is required but not installed. Install curl and re-run." >&2
  exit 1
fi

RAW_BASE_URL="${RAW_BASE_URL:-https://raw.githubusercontent.com/RoninATX/Bootstraps/main}"
INSTALL_PATH="${INSTALL_PATH:-/usr/local/bin/ddns-sync.sh}"
CONFIG_PATH="${CONFIG_PATH:-/etc/ddns-sync.conf}"

printf '\n==> Downloading ddns-sync.sh to %s\n' "$INSTALL_PATH"
install -d -m 0755 "$(dirname "$INSTALL_PATH")"
TEMP_DOWNLOAD="$(mktemp)"
trap 'rm -f "$TEMP_DOWNLOAD"' EXIT

if ! curl -fsSL "${RAW_BASE_URL%/}/ddns-sync.sh" -o "$TEMP_DOWNLOAD"; then
  echo "Failed to download ddns-sync.sh from ${RAW_BASE_URL%/}/ddns-sync.sh" >&2
  exit 1
fi

install -m 0755 "$TEMP_DOWNLOAD" "$INSTALL_PATH"
rm -f "$TEMP_DOWNLOAD"
trap - EXIT

printf 'Downloaded ddns-sync.sh and installed to %s\n\n' "$INSTALL_PATH"

create_interactive_config() {
  local use_token auth_choice email credential ttl_value record_type domains=()

  echo "Let's create the ddns-sync configuration."

  read -rp "Will you authenticate with a Cloudflare API token? [y/N]: " auth_choice
  if [[ "$auth_choice" =~ ^[Yy]$ ]]; then
    use_token=true
  else
    use_token=false
  fi

  if [[ "$use_token" == false ]]; then
    read -rp "Cloudflare account email: " email
    while [[ -z "$email" ]]; do
      echo "Email cannot be empty when using a global API key."
      read -rp "Cloudflare account email: " email
    done
  fi

  if [[ "$use_token" == true ]]; then
    read -rsp "Cloudflare API token: " credential
  else
    read -rsp "Cloudflare global API key: " credential
  fi
  echo
  while [[ -z "$credential" ]]; do
    echo "Credential cannot be empty."
    if [[ "$use_token" == true ]]; then
      read -rsp "Cloudflare API token: " credential
    else
      read -rsp "Cloudflare global API key: " credential
    fi
    echo
  done

  echo
  read -rp "DNS record type to manage [A]: " record_type
  record_type="${record_type:-A}"
  record_type="${record_type^^}"

  read -rp "Desired TTL in seconds (use 1 for auto) [300]: " ttl_value
  ttl_value="${ttl_value:-300}"
  ttl_value="${ttl_value//[[:space:]]/}"

  echo
  echo "Enter each DNS record you want ddns-sync.sh to manage."
  echo "Press Enter on a blank line when you are finished."
  while true; do
    local domain
    read -rp "DNS record: " domain || true
    [[ -z "$domain" ]] && break
    domains+=("$domain")
  done

  if ((${#domains[@]} == 0)); then
    echo "No DNS records entered; config will contain an empty list for now."
  fi

  {
    echo '# ddns-sync configuration file'
    echo '# Generated by bootstrap-ddns-sync.sh'
    if [[ "$use_token" == true ]]; then
      echo "CLOUDFLARE_API_TOKEN=\"$credential\""
    else
      echo "CLOUDFLARE_EMAIL=\"$email\""
      echo "CLOUDFLARE_API_KEY=\"$credential\""
    fi
    printf 'TTL="%s"\n' "$ttl_value"
    printf 'TYPE="%s"\n' "$record_type"
    echo
    echo '# List each DNS record to keep updated. Feel free to edit manually later.'
    echo 'DNS_RECORDS=('
    for domain in "${domains[@]}"; do
      printf '  "%s"\n' "$domain"
    done
    echo ')'
  } >"$CONFIG_PATH"
}

create_generic_config() {
  {
    cat <<'EOF'
# ddns-sync configuration file
# Generated by bootstrap-ddns-sync.sh
#
# Update these values with your Cloudflare credentials and the list of DNS
# records you want to keep in sync. Values in this file behave like a bash
# script, so keep the surrounding quotes when you fill them in.

CLOUDFLARE_EMAIL="your-email@example.com"
CLOUDFLARE_API_KEY="paste-your-global-api-key"
# If you prefer to use an API token instead of a global key, set it here and
# comment out CLOUDFLARE_API_KEY and CLOUDFLARE_EMAIL above.
# CLOUDFLARE_API_TOKEN="paste-your-api-token"
TTL="300"
TYPE="A"

# Add one DNS record per quoted line. For example:
# DNS_RECORDS=(
#   "example.com"
#   "vpn.example.com"
# )
DNS_RECORDS=()
EOF
  } >"$CONFIG_PATH"
}

maybe_overwrite_config=true
if [[ -f "$CONFIG_PATH" ]]; then
  read -rp "Configuration file $CONFIG_PATH already exists. Overwrite? [y/N]: " overwrite
  overwrite="${overwrite:-n}"
  if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
    echo "Keeping existing configuration at $CONFIG_PATH"
    maybe_overwrite_config=false
  fi
fi

if [[ "$maybe_overwrite_config" == true ]]; then
  install -d -m 0755 "$(dirname "$CONFIG_PATH")"
  read -rp "Would you like help creating the configuration now? [Y/n]: " help_config
  help_config="${help_config:-y}"
  if [[ "$help_config" =~ ^[Yy]$ ]]; then
    create_interactive_config
  else
    echo "Creating a template configuration at $CONFIG_PATH"
    create_generic_config
  fi
  chmod 600 "$CONFIG_PATH"
  echo "Configuration written to $CONFIG_PATH"
fi

echo
cat <<EOF
Next steps:
  • Review $INSTALL_PATH to confirm it is executable.
  • Edit $CONFIG_PATH if you need to tweak your Cloudflare details or DNS list.
  • When ready, add a cron job such as:
      */5 * * * * $INSTALL_PATH >> /var/log/ddns-sync.log 2>&1
    This runs the sync every 5 minutes and logs output to /var/log/ddns-sync.log.

To edit the cron schedule for the current user run: crontab -e
EOF

printf '\nAll done!\n'
